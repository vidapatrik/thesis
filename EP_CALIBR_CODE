
# Load data
# pbp_data <- readRDS('../../nflfastR-data/models/cal_data.rds')

# Preprocess the data and create model mutations
model_data <- pbp_data %>%
  make_model_mutations() %>%
  mutate(
    label = factor(case_when(
      Next_Score_Half == "Touchdown" ~ 0,
      Next_Score_Half == "Opp_Touchdown" ~ 1,
      Next_Score_Half == "Field_Goal" ~ 2,
      Next_Score_Half == "Opp_Field_Goal" ~ 3,
      Next_Score_Half == "Safety" ~ 4,
      Next_Score_Half == "Opp_Safety" ~ 5,
      Next_Score_Half == "No_Score" ~ 6
    )),
    Drive_Score_Dist = Drive_Score_Half - drive,
    Drive_Score_Dist_W = (max(Drive_Score_Dist) - Drive_Score_Dist) / (max(Drive_Score_Dist) - min(Drive_Score_Dist)),
    ScoreDiff_W = (max(abs(score_differential), na.rm = TRUE) - abs(score_differential)) /
      (max(abs(score_differential), na.rm = TRUE) - min(abs(score_differential), na.rm = TRUE)),
    Total_W = Drive_Score_Dist_W + ScoreDiff_W,
    Total_W_Scaled = (Total_W - min(Total_W, na.rm = TRUE)) / (max(Total_W, na.rm = TRUE) - min(Total_W, na.rm = TRUE))
  ) %>%
  filter(
    !is.na(defteam_timeouts_remaining), !is.na(posteam_timeouts_remaining),
    !is.na(yardline_100)
  ) %>%
  select(
    label,
    season,
    half_seconds_remaining,
    yardline_100,
    home,
    retractable,
    dome,
    outdoors,
    ydstogo,
    era0, era1, era2, era3, era4,
    down1, down2, down3, down4,
    posteam_timeouts_remaining,
    defteam_timeouts_remaining,
    Total_W_Scaled
  )

# Convert label to numeric and adjust the levels
model_data <- model_data %>%
  mutate(
    label = as.numeric(label) - 1
  )

# Remove the original data to free up memory
rm(pbp_data)

# Define XGBoost parameters
nrounds <- 525
params <- list(
  booster = "gbtree",
  objective = "multi:softprob",
  eval_metric = c("mlogloss"),
  num_class = 7,
  eta = 0.025,
  gamma = 1,
  subsample = 0.8,
  colsample_bytree = 0.8,
  max_depth = 5,
  min_child_weight = 1
)

# Perform cross-validation and generate predictions
cv_results <- map_dfr(seasons, function(x) {
  test_data <- model_data %>%
    filter(season == x) %>%
    select(-season)
  train_data <- model_data %>%
    filter(season != x) %>%
    select(-season)

  full_train <- xgboost::xgb.DMatrix(
    model.matrix(~ . + 0, data = train_data %>% select(-label, -Total_W_Scaled)),
    label = train_data$label,
    weight = train_data$Total_W_Scaled
  )
  ep_model <- xgboost::xgboost(params = params, data = full_train, nrounds = nrounds, verbose = 2)

  preds <- as.data.frame(
    matrix(predict(ep_model, as.matrix(test_data %>% select(-label, -Total_W_Scaled))), ncol = 7, byrow = TRUE)
  )
  colnames(preds) <- c(
    "Touchdown", "Opp_Touchdown", "Field_Goal", "Opp_Field_Goal",
    "Safety", "Opp_Safety", "No_Score"
  )

  cv_data <- bind_cols(test_data, preds) %>% mutate(season = x)
  return(cv_data)
})

# Create BINS for the calibration plot
plot <- cv_results %>%
  select(Touchdown, Opp_Touchdown, Field_Goal, Opp_Field_Goal, Safety, Opp_Safety, No_Score, label) %>%
  pivot_longer(-label, names_to = "type", values_to = "pred_prob") %>%
  mutate(bin_pred_prob = round(pred_prob / 0.05) * 0.05) %>%
  mutate(outcome = factor(case_when(
    label == 0 ~ "Touchdown",
    label == 1 ~ "Opp_Touchdown",
    label == 2 ~ "Field_Goal",
    label == 3 ~ "Opp_Field_Goal",
    label == 4 ~ "Safety",
    label == 5 ~ "Opp_Safety",
    label == 6 ~ "No_Score"
  ))) %>%
  group_by(type, bin_pred_prob) %>%
  mutate(correct = if_else(outcome == type, 1, 0)) %>%
  summarize(
    n_plays = n(),
    n_outcome = sum(correct),
    bin_actual_prob = n_outcome / n_plays
  )

# Define annotation text for the calibration plot
ann_text <- data.frame(
  x = c(0.25, 0.75),
  y = c(0.75, 0.25),
  lab = c("More times\nthan expected", "Fewer times\nthan expected"),
  next_score_type = factor("No Score (0)")
)

# Create calibration plot
plot %>%
  ungroup() %>%
  mutate(
    type = fct_relevel(
      type,
      "Opp_Safety", "Opp_Field_Goal",
      "Opp_Touchdown", "No_Score", "Safety",
      "Field_Goal", "Touchdown"
    ),
    type = fct_recode(type,
      "-Field Goal (-3)" = "Opp_Field_Goal",
      "-Safety (-2)" = "Opp_Safety",
      "-Touchdown (-7)" = "Opp_Touchdown",
      "Field Goal (3)" = "Field_Goal",
      "No Score (0)" = "No_Score",
      "Touchdown (7)" = "Touchdown",
      "Safety (2)" = "Safety"
    )
  ) %>%
  ggplot() +
  geom_point(aes(x = bin_pred_prob, y = bin_actual_prob, size = n_plays)) +
  geom_smooth(aes(x = bin_pred_prob, y = bin_actual_prob), method = "loess") +
  geom_abline(slope = 1, intercept = 0, color = "black",# Load necessary libraries if not loaded
# install.packages("tidyverse")
# install.packages("xgboost")
library(tidyverse)
library(xgboost)

# Load your data
# pbp_data <- readRDS('../../nflfastR-data/models/cal_data.rds')

# Preprocess the data and create model mutations
model_data <- pbp_data %>%
  make_model_mutations() %>%
  mutate(
    label = factor(case_when(
      Next_Score_Half == "Touchdown" ~ 0,
      Next_Score_Half == "Opp_Touchdown" ~ 1,
      Next_Score_Half == "Field_Goal" ~ 2,
      Next_Score_Half == "Opp_Field_Goal" ~ 3,
      Next_Score_Half == "Safety" ~ 4,
      Next_Score_Half == "Opp_Safety" ~ 5,
      Next_Score_Half == "No_Score" ~ 6
    )),
    Drive_Score_Dist = Drive_Score_Half - drive,
    Drive_Score_Dist_W = (max(Drive_Score_Dist) - Drive_Score_Dist) / (max(Drive_Score_Dist) - min(Drive_Score_Dist)),
    ScoreDiff_W = (max(abs(score_differential), na.rm = TRUE) - abs(score_differential)) /
      (max(abs(score_differential), na.rm = TRUE) - min(abs(score_differential), na.rm = TRUE)),
    Total_W = Drive_Score_Dist_W + ScoreDiff_W,
    Total_W_Scaled = (Total_W - min(Total_W, na.rm = TRUE)) / (max(Total_W, na.rm = TRUE) - min(Total_W, na.rm = TRUE))
  ) %>%
  filter(
    !is.na(defteam_timeouts_remaining), !is.na(posteam_timeouts_remaining),
    !is.na(yardline_100)
  ) %>%
  select(
    label,
    season,
    half_seconds_remaining,
    yardline_100,
    home,
    retractable,
    dome,
    outdoors,
    ydstogo,
    era0, era1, era2, era3, era4,
    down1, down2, down3, down4,
    posteam_timeouts_remaining,
    defteam_timeouts_remaining,
    Total_W_Scaled
  )

# Convert label to numeric and adjust the levels
model_data <- model_data %>%
  mutate(
    label = as.numeric(label) - 1
  )

# Remove the original data to free up memory
rm(pbp_data)

# Define XGBoost parameters
nrounds <- 525
params <- list(
  booster = "gbtree",
  objective = "multi:softprob",
  eval_metric = c("mlogloss"),
  num_class = 7,
  eta = 0.025,
  gamma = 1,
  subsample = 0.8,
  colsample_bytree = 0.8,
  max_depth = 5,
  min_child_weight = 1
)

# Perform cross-validation and generate predictions
cv_results <- map_dfr(seasons, function(x) {
  test_data <- model_data %>%
    filter(season == x) %>%
    select(-season)
  train_data <- model_data %>%
    filter(season != x) %>%
    select(-season)

  full_train <- xgboost::xgb.DMatrix(
    model.matrix(~ . + 0, data = train_data %>% select(-label, -Total_W_Scaled)),
    label = train_data$label,
    weight = train_data$Total_W_Scaled
  )
  ep_model <- xgboost::xgboost(params = params, data = full_train, nrounds = nrounds, verbose = 2)

  preds <- as.data.frame(
    matrix(predict(ep_model, as.matrix(test_data %>% select(-label, -Total_W_Scaled))), ncol = 7, byrow = TRUE)
  )
  colnames(preds) <- c(
    "Touchdown", "Opp_Touchdown", "Field_Goal", "Opp_Field_Goal",
    "Safety", "Opp_Safety", "No_Score"
  )

  cv_data <- bind_cols(test_data, preds) %>% mutate(season = x)
  return(cv_data)
})

# Create BINS for the calibration plot
plot <- cv_results %>%
  select(Touchdown, Opp_Touchdown, Field_Goal, Opp_Field_Goal, Safety, Opp_Safety, No_Score, label) %>%
  pivot_longer(-label, names_to = "type", values_to = "pred_prob") %>%
  mutate(bin_pred_prob = round(pred_prob / 0.05) * 0.05) %>%
  mutate(outcome = factor(case_when(
    label == 0 ~ "Touchdown",
    label == 1 ~ "Opp_Touchdown",
    label == 2 ~ "Field_Goal",
    label == 3 ~ "Opp_Field_Goal",
    label == 4 ~ "Safety",
    label == 5 ~ "Opp_Safety",
    label == 6 ~ "No_Score"
  ))) %>%
  group_by(type, bin_pred_prob) %>%
  mutate(correct = if_else(outcome == type, 1, 0)) %>%
  summarize(
    n_plays = n(),
    n_outcome = sum(correct),
    bin_actual_prob = n_outcome / n_plays
  )

# Define annotation text for the calibration plot
ann_text <- data.frame(
  x = c(0.25, 0.75),
  y = c(0.75, 0.25),
  lab = c("More times\nthan expected", "Fewer times\nthan expected"),
  next_score_type = factor("No Score (0)")
)

# Create calibration plot
plot %>%
  ungroup() %>%
  mutate(
    type = fct_relevel(
      type,
      "Opp_Safety", "Opp_Field_Goal",
      "Opp_Touchdown", "No_Score", "Safety",
      "Field_Goal", "Touchdown"
    ),
    type = fct_recode(type,
      "-Field Goal (-3)" = "Opp_Field_Goal",
      "-Safety (-2)" = "Opp_Safety",
      "-Touchdown (-7)" = "Opp_Touchdown",
      "Field Goal (3)" = "Field_Goal",
      "No Score (0)" = "No_Score",
      "Touchdown (7)" = "Touchdown",
      "Safety (2)" = "Safety"
    )
  ) %>%
  ggplot() +
  geom_point(aes(x = bin_pred_prob, y = bin_actual_prob, size = n_plays)) +
  geom_smooth(aes(x = bin_pred_prob, y = bin_actual_prob), method = "loess") +
  geom_abline(slope = 1, intercept = 0, color = "black",
